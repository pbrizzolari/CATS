### merged final dataset
setwd(dirname(getActiveDocumentContext()$path))
### merged final dataset
library(tidyverse)
setwd(dirname(getActiveDocumentContext()$path))
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
data <- read.table("/Caterina/merged.txt", header=TRUE)
data <- read.table("/merged.txt", header=TRUE)
data <- read.table("merged.txt", header=TRUE)
head(data[,1:7])
fs_matrix <- filterVarImp(data[,3:2836], as.factor(data[,2]))
head(fs_matrix)
library(ggfortify)
fs_matrix <- filterVarImp(data[,3:2836], as.factor(data[,2]))
library(caret)
fs_matrix <- filterVarImp(data[,3:2836], as.factor(data[,2]))
?filterVarImp
head(fs_matrix)
data_fs <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.6)
########## feature selection ##########
feature_selection <- function(data, X, y, perc = 0.6){
fs_matrix <- filterVarImp(X, y)
fs <- apply(fs_matrix,1,mean)
sorted_features <- sort(fs, decreasing = T)
n <- length(sorted_features[sorted_features >= perc])
selected <- sorted_features[1:n]
keep <- c(names(data[,1:2]), names(selected))
data_fs <- data[, (names(data) %in% keep)]
return(data_fs)
}
data_fs <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.6)
pc <- prcomp(data_fs[,3:length(data_fs)], scale.=T, center = TRUE) # con scale.=T ottengo le PC a partire dalle correlazioni
summary(pc)
biplot(pc)
df_out <- as.data.frame(pc$x)
df_out$y <- data_fs[,2]
p<-ggplot(df_out,aes(x=PC1,y=PC2,color=y ))
p<-p+geom_point()
p
#### random forest ####
data_feature <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.6)
model_rf <- train(data_feature[,3:length(data_feature)], data_feature[,2], method = "rf",
trControl = trainControl(method="cv", number = 10))
model_rf
model_rf <- train(data_feature[,3:length(data_feature)], data_feature[,2], method = "rf",
trControl = trainControl(method="repeatdcv", number = 5, repetition = 5))
model_rf <- train(data_feature[,3:length(data_feature)], data_feature[,2], method = "rf",
trControl = trainControl(method="repeatdcv", number = 5, repeats = 5))
model_rf <- train(data_feature[,3:length(data_feature)], data_feature[,2], method = "rf",
trControl = trainControl(method="repeatedcv", number = 5, repeats = 5))
########## multinomial models ##########
X <- as.data.frame(data[,3:2836])
head(X[,1:7])
########## multinomial models ##########
X <- as.data.frame(data[,2:2836])
head(X[,1:7])
##### ranger ####
X <- as.data.frame(data[,2:2836])
head(X[,1:7])
tuneGrid <- data.frame(
.mtry = c(2, 3, 7),
.splitrule = "variance",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
)
model
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
)
?train
tuneGrid <- data.frame(
.mtry = c(2, 3, 7),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
)
model
model
plot(model)
tuneGrid <- data.frame(
.mtry = c(2, 3, 7, 100, 500),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
)
model
plot(model)
tuneGrid <- data.frame(
.mtry = c(2, 3, 7, 100, 500, 1000),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
)
model
plot(model)
tuneGrid <- data.frame(
.mtry = c(10, 100, 500, 750, 1000, 1250, 1500),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
)
model
plot(model)
##### ranger ####
set.seed(1234)
X <- as.data.frame(data[,2:2836])
head(X[,1:7])
tuneGrid <- data.frame(
.mtry = c(10, 100, 500, 750, 1000, 1250, 1500, 1750, 2000, 2500),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
)
model
plot(model)
tuneGrid <- data.frame(
.mtry = c(10, 100, 500, 750, 1000, 1250, 1500, 1750, 2000, 2500, 3000, 3500),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
)
model
plot(model)
X <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)
head(X[,1:7])
X <- (feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65))[,2:length(data)]
length(data)
X <- as.data.frame(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65))[,2:length(data)])
X <- as.data.frame(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)[,2:length(data)])
X <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)
head(X[,1:7])
X <- as.data.frame(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)[,2:length(data-1)])
X <- as.data.frame(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)[,2:(length(data)-1)])
head(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)[,1:7])
head(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)[,2:7])
head(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)[,])
X <- as.data.frame(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)[,2:(length(data)-2)])
dim(feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65))
data_fs <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.8)
X <- as.data.frame(data_fs[,2:(length(data_fs))])
head(X[,1:7])
head(X
)
2:(length(data_fs))
length(data_fs)
X <- as.data.frame(data_fs[,2:(dim(data_fs)[2])])
head(X[,1:7])
dim(data_fs)
data_fs <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.8)
dim(data_fs)
data
data_fs <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.8)
head(data_fs)
#### random forest ####
data_feature <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.6)
data_feature
data_fs <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.65)
X <- as.data.frame(data_fs[,2:dim(data_fs)])
head(X[,1:7])
dim(data_fs)
X <- as.data.frame(data_fs[,2:dim(data_fs)[2]])
head(X[,1:7])
head(X[,1:7])
tuneGrid <- data.frame(
.mtry = c(10, 100, 500, 750, 1000, 1250, 1500, 1750, 2000, 2500),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "repeatedcv",
number = 3,
repeats = 100,
verboseIter = TRUE
)
)
data_fs <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.5)
X <- as.data.frame(data_fs[,2:dim(data_fs)[2]])
tuneGrid <- data.frame(
.mtry = c(10, 100, 500, 750, 1000, 1250, 1500, 1750, 2000, 2500),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "repeatedcv",
number = 3,
repeats = 100,
verboseIter = TRUE
)
)
model
plot(model)
dim(X)
data_fs <- feature_selection(data, data[,3:2836], as.factor(data[,2]), perc = 0.6)
X <- as.data.frame(data_fs[,2:dim(data_fs)[2]])
dim(X)
tuneGrid <- data.frame(
.mtry = c(10, 100, 250, 500, 750, 1000),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = X,
method = "ranger",
trControl = trainControl(
method = "repeatedcv",
number = 3,
repeats = 20,
verboseIter = TRUE
)
)
model
plot(model)
pred <- predict(model, newdata = data[,2:dim(data)[2]])
pred
rmse <- sqrt(mean((pred-data$Subgroup)^2))
table(pred, data$Subgroup)
?filterVarImp
rm(list=ls())
### merged final dataset
library(tidyverse)
library(rstudioapi)
library(ggfortify)
library(caret)
setwd(dirname(getActiveDocumentContext()$path))
data <- read.table("merged.txt", header=TRUE)
head(data[,1:7])
row.names(data) <- data[,1]
head(data[,1:7])
data <- data[,1]
head(data[,1:7])
setwd(dirname(getActiveDocumentContext()$path))
data <- read.table("merged.txt", header=TRUE)
row.names(data) <- data[,1]
data <- data[,-1]
head(data[,1:7])
write.csv2(data, "merged.txt")
data <- read.table("merged.csv", header=TRUE)
data
write.csv2(data, "merged.csv")
rm(list=ls())
### merged final dataset
library(tidyverse)
library(rstudioapi)
library(ggfortify)
library(caret)
setwd(dirname(getActiveDocumentContext()$path))
data <- read.table("merged.csv", header=TRUE)
head(data[,1:7])
data <- read_csv2("merged.csv", header=TRUE)
data <- read_csv2("merged.csv")
data <- read_csv2("merged.csv", sep=";")
data <- read_csv2("merged.csv")
head(data[,1:7])
data <- read.csv2("merged.csv")
head(data[,1:7])
data <- read.csv2("merged.csv", header = T)
head(data[,1:7])
?read.csv2
data <- read.csv2("merged.csv", header = T, sep=";")
head(data[,1:7])
data <- read.csv2("merged.csv", header = T, sep=";", row.names = 1)
head(data[,1:7])
##### ranger ####
set.seed(123)
mcnemar.test(training[,1], testing[,1])
indxTrain <- createDataPartition(y = data[,1],p = 0.75, list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
mcnemar.test(training[,1], testing[,1])
training[,1]
testing[,1]
table(training[,1], testing[,1])
prop.table(table(training$Subgroup))
prop.table(table(testing$Subgroup))
prop.table(table(data$Subgroup))
?seq
set.seed(123)
indxTrain <- createDataPartition(y = data[,1], p = 0.75, list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
prop.table(table(training$Subgroup))
prop.table(table(testing$Subgroup))
prop.table(table(data$Subgroup))
tuneGrid <- data.frame(
.mtry = seq(10, dim(training)[2], by = 200),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = training,
method = "ranger",
trControl = trainControl(
method = "repeatedcv",
number = 3,
repeats = 20,
verboseIter = TRUE
)
)
model
plot(model)
pred <- predict(model, newdata = testing)
confusionMatrix(pred, testing$Subgroup)
pred
testing$Subgroup
confusionMatrix(pred, as.factor(testing$Subgroup))
?roc
?rev
rfROC <- roc(testing$Subgroup, pred_prob[,"HER2+"], levels = "HER2+")
library(pROC)
pred_prob <- predict(model, newdata = testing , type="prob")
?predict
vglm1 <- vglm(Subgroup~.,data = data, multinomial)
########## multinomial models ##########
library(VGAM)
vglm1 <- vglm(Subgroup~.,data = data, multinomial)
summary(vglm1)
pred_prob
pred_prob <- predict(model, newdata = testing)
pred_prob
pred_prob[,"HER2+"]
rfROC <- roc(pred_prob[pred_prob=="HER2+"], levels = c("HER2+", "HR+"))
pred_prob[pred_prob=="HER2+"]
rfROC <- roc(pred_prob[pred_prob=="HER2+"])
rfROC <- roc(testing$Subgroup, pred_prob, levels = c("HER2+", "HR+"))
rfROC <- roc(testing$Subgroup, pred_prob, levels = c("HER2+"))
rfROC <- roc(as.factor(testing$Subgroup), pred_prob, levels = c("HER2+", "HR+"))
as.factor(testing$Subgroup)
rfROC <- roc(as.factor(testing$Subgroup), pred_prob[,"HER2+"], levels = c("HER2+", "HR+"))
pred_prob
pred_prob[,"HER2+"]
rfROC <- roc(as.factor(testing$Subgroup), pred_prob, levels = c("HER2+"))
rfROC <- roc(as.factor(testing$Subgroup), pred_prob, levels = c("HER2+", "HR+"))
pred_prob <- predict(model, newdata = testing, prob=T)
rfROC <- roc(response = as.factor(testing$Subgroup), predictor = pred_prob, levels = c("HER2+", "HR+"))
pred_prob
pred_prob <- predict(model, newdata = testing, type="prob")
testing
pred_prob <- predict(model, newdata = testing$Subgroup, type="prob")
pred_prob <- predict(model, newdata = testing, probability=T)
rfROC <- roc(response = as.factor(testing$Subgroup), predictor = pred_prob, levels = c("HER2+", "HR+"))
pred_prob <- predict(model, newdata = testing, type="response")
pred_prob <- predict(model, newdata = testing, type="prob")
pred <- predict(model, newdata = testing)
pred
confusionMatrix(pred, as.factor(testing$Subgroup))
pred_prob <- predict(model, newdata = testing, type="prob")
pred_prob <- predict(model, newdata = testing, type="response")
?predict
?train
##### ranger ####
set.seed(123)
indxTrain <- createDataPartition(y = data[,1], p = 0.6, list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
prop.table(table(training$Subgroup))
prop.table(table(testing$Subgroup))
prop.table(table(data$Subgroup))
tuneGrid <- data.frame(
.mtry = seq(10, dim(training)[2], by = 200),
.splitrule = "gini",
.min.node.size = 5
)
model <- train(
Subgroup~.,
tuneGrid = tuneGrid,
data = training,
method = "ranger",
trControl = trainControl(
method = "repeatedcv",
number = 3,
repeats = 20,
verboseIter = TRUE
)
)
# loading data
spotify_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
summary(spotify_songs)
